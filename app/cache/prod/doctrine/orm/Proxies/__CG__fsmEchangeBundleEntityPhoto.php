<?php

namespace Proxies\__CG__\fsm\EchangeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Photo extends \fsm\EchangeBundle\Entity\Photo implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'id', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'extension', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'alt', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'principal', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'objet', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'user', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'file', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'tempFilename', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'identifiant');
        }

        return array('__isInitialized__', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'id', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'extension', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'alt', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'principal', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'objet', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'user', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'file', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'tempFilename', '' . "\0" . 'fsm\\EchangeBundle\\Entity\\Photo' . "\0" . 'identifiant');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Photo $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getWebPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebPath', array());

        return parent::getWebPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getfile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getfile', array());

        return parent::getfile();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile(\Symfony\Component\HttpFoundation\File\UploadedFile $file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', array($file));

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function preUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpload', array());

        return parent::preUpload();
    }

    /**
     * {@inheritDoc}
     */
    public function upload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upload', array());

        return parent::upload();
    }

    /**
     * {@inheritDoc}
     */
    public function preRemoveUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preRemoveUpload', array());

        return parent::preRemoveUpload();
    }

    /**
     * {@inheritDoc}
     */
    public function removeUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUpload', array());

        return parent::removeUpload();
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadDir()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadDir', array());

        return parent::getUploadDir();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setObjet(\fsm\EchangeBundle\Entity\Objet $objet = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObjet', array($objet));

        return parent::setObjet($objet);
    }

    /**
     * {@inheritDoc}
     */
    public function getObjet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObjet', array());

        return parent::getObjet();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrincipal($principal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrincipal', array($principal));

        return parent::setPrincipal($principal);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrincipal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrincipal', array());

        return parent::getPrincipal();
    }

    /**
     * {@inheritDoc}
     */
    public function setExtension($extension)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExtension', array($extension));

        return parent::setExtension($extension);
    }

    /**
     * {@inheritDoc}
     */
    public function getExtension()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtension', array());

        return parent::getExtension();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\fsm\UserBundle\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setAlt($alt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAlt', array($alt));

        return parent::setAlt($alt);
    }

    /**
     * {@inheritDoc}
     */
    public function getAlt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlt', array());

        return parent::getAlt();
    }

}
